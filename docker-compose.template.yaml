name: __PROJECT_NAME__

services:
  loadbalancer:
    image: nginx:latest
    container_name: loadbalancer
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - '80:80'
    networks:
      - __PROJECT_NAME__
    restart: always

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - '9090:9090'
    restart: always
    networks:
      - __PROJECT_NAME__

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - '3100:3000'
    restart: always
    volumes:
      - __PROJECT_NAME__-grafana:/var/lib/grafana
    networks:
      - __PROJECT_NAME__

  db:
    container_name: db
    image: postgres
    ports:
      - '5432:5432'
    env_file:
      - db.env
    volumes:
      - __PROJECT_NAME__-db:/var/lib/postgresql/data
    networks:
      - __PROJECT_NAME__
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d __DB_NAME__"]
      interval: 5s
      timeout: 2s
      retries: 10
      
  api-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api-1
    image: __PROJECT_NAME__
    env_file:
      - api.env
    depends_on:
      - logger
      - db
    networks:
      - __PROJECT_NAME__
    restart: always

  api-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: api-2
    image: __PROJECT_NAME__
    env_file:
      - api.env
    depends_on:
      - logger
      - db
    networks:
      - __PROJECT_NAME__
    restart: always
  
  logger:
    container_name: logger
    image: spoonersl/express-logger
    environment:
      - SERVER_ROLE=all
      - LOG_PORT=3001
      - LOG_LEVEL=info
    networks:
      - __PROJECT_NAME__
    restart: always

volumes:
  __PROJECT_NAME__-db:
  __PROJECT_NAME__-grafana:

networks:
  __PROJECT_NAME__:
    driver: bridge
